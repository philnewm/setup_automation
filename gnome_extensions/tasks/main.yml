---

# tasks file for gnome_extensions

# INFO needs update right after install
- name: "Clone extensions from github"
  ansible.builtin.git:
    repo: "{{ item.repo_url }}"
    dest: "{{ (user_install_dir, item.download_dir) | ansible.builtin.path_join }}"
    single_branch: true
    version: "{{ item.branch }}"
    depth: 1
  loop: "{{ github_repo_extensions }}"

- name: Update installer permissions
  ansible.builtin.file:
    path: "{{ (user_install_dir, item.install_dir, 'build.sh') | ansible.builtin.path_join }}"
    mode: "0755"
  loop: "{{ github_repo_extensions }}"

- name: "Install extensions from github"
  ansible.builtin.command: "{{ item.install_cmd }}"
  args:
    chdir: "{{ (user_install_dir, item.install_dir) | ansible.builtin.path_join }}"
  register: install_result
  changed_when: install_result.rc == 0
  loop: "{{ github_repo_extensions }}"

# TODO find a way to reload session without rebooting
- name: Reboot the host and continue playbook
  ansible.builtin.reboot:
    msg: Reboot initiated by Ansible
    pre_reboot_delay: 5
    reboot_timeout: 300
  become: true

- name: Wait for the host to come back online
  ansible.builtin.wait_for_connection:
    timeout: 300

- name: Configure gnome-extensions
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ gnome_extensions_settings }}"

- name: Configure panel-extension
  community.general.dconf:
    key: "{{ dash_to_panel_extension_path }}{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ dash_to_panel_extension_settings }}"

- name: Configure monitor-extension
  community.general.dconf:
    key: "{{ monitor_extension_path }}{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ system_monitor_extension_settings }}"

- name: Configure Tiling-Assistant
  community.general.dconf:
    key: "{{ tiling_assistent_path }}{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ tiling_assistent_settings }}"

# TODO implement check for gnome version
# INFO doesn't work for gnome 40
# - name: Configure gpaste
#   community.general.dconf:
#     key: "{{ gpaste_extension_path }}{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ gpaste_extension_settings }}"

...
