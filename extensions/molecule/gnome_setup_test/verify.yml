---

- name: Verify
  hosts: client

  vars_files:
    - ../../../gnome_setup/defaults/main.yml
    - ../../../gnome_setup/vars/main.yml

  tasks:
    # gather package facts:
    - name: Gather package facts
      ansible.builtin.package_facts:

    # check enabled repos
    - name: Get repos on rhel based systems
      when: ansible_os_family == "RedHat"
      block:
        - name: Get enabled repos
          ansible.builtin.shell:
            cmd: "dnf repolist --enabled | awk '{print $1}'"
          register: enabled_repos
          changed_when: false

        - name: Test enabled repos
          ansible.builtin.assert:
            that:
              - item in enabled_repos.stdout_lines
            fail_msg: "Repo {{ item }} is missing"
            quiet: true
          loop:
            - crb
            - epel
            - rpmfusion-free-updates
            - rpmfusion-nonfree-updates

    # check installed requirements
    - name: Test installed requirements
      ansible.builtin.assert:
        that:
          - item in ansible_facts.packages
        fail_msg: "Required package {{ item }} is missing"
        quiet: true
      loop: "{{ dependencies[ansible_os_family] }}"

    # check installed packages
    - name: Test installed gnome packages
      ansible.builtin.assert:
        that:
          - item in ansible_facts.packages
        fail_msg: "Gnome package {{ item }} is missing"
        quiet: true
      loop: "{{ gnome_packages[ansible_distribution] }}"

    # check removed packages
    - name: Test removed gnome packages
      ansible.builtin.assert:
        that:
          - item not in ansible_facts.packages
        fail_msg: "Obsolete Gnome package {{ item }} is still rpesent"
        quiet: true
      loop: "{{ obsolete_packages[ansible_os_family] }}"

    # assert graphical target
    - name: Get current target
      ansible.builtin.stat:
        path: /etc/systemd/system/default.target
      register: default_target

    - name: Test graphical target
      ansible.builtin.assert:
        that:
          - default_target.stat.islnk == true
          - default_target.stat.lnk_target == "/usr/lib/systemd/system/graphical.target"
        fail_msg: "Graphical target not set as default"
        quiet: true

    # assert X11
    - name: "Get gdm config"
      ansible.builtin.command:
        cmd: "cat {{ gdm_config_file[ansible_distribution] }}"
      register: gdm_config
      changed_when: false

    - name: Assert X11 is set
      ansible.builtin.assert:
        that:
          - "'WaylandEnable=false' in gdm_config.stdout_lines"
          - "'DefaultSession=gnome-xorg.desktop' in gdm_config.stdout_lines"
        fail_msg: "One or both of the expected lines are not present in {{ gdm_config_file[ansible_distribution] }}"
        success_msg: "Both expected lines are present in {{ gdm_config_file[ansible_distribution] }}"
        quiet: true

    - name: Get Gnome version
      ansible.builtin.shell:
        cmd: "gnome-shell --version | awk '{print $3}' | cut -d'.' -f1"
      register: gnome_major_version
      changed_when: false

    - name: Get gnome base settings
      loop: "{{ gnome_base_settings[gnome_major_version.stdout] | dict2items }}"
      community.general.dconf:
        key: "{{ item.key }}"
        state: read
      register: dconf_list

    # asser gnome base settings
    - name: Test gnome settings
      loop: "{{ dconf_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item.key }}"
      ansible.builtin.assert:
        that:
          - entry.value == gnome_base_settings[gnome_major_version.stdout][entry.item.key]
        fail_msg: "Expected value '{{ gnome_base_settings[gnome_major_version.stdout][entry.item.key] }}' but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'"
        quiet: true

    # assert installed extensions
    - name: Get installed GNOME extensions
      ansible.builtin.shell:
        cmd: "ls ~/.local/share/gnome-shell/extensions/ && ls /usr/share/gnome-shell/extensions"
      register: gnome_extensions_list
      changed_when: false

    - name: Test installed extensions
      loop: "{{ gnome_extensions }}"
      loop_control:
        label: "{{ extension.name }}"
        loop_var: extension
      when: extension.distro[ansible_distribution] is defined
      ansible.builtin.assert:
        that:
          extension.distro[ansible_distribution].name in gnome_extensions_list.stdout_lines
        fail_msg: "Failed to find {{ extension.name }} in installed extensions"
        quiet: true

    # assert enabled extensions
    # assert disabled extensions
    # assert gnome themes
    # assert configured profile picture
    # TODO implement absent version of this role
