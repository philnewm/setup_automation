---

- name: Verify
  hosts: client

  vars:
    dummy_file_name: "hello_world.sh"

  tasks:

    - name: Get cifs package status
      when: ansible_distribution in rhel_based_distros
      become: true
      ansible.builtin.dnf:
        name: "cifs-utils"
        state: present
      check_mode: true
      register: dnf_status

    - name: Test cifs package is installed via dnf
      when: ansible_distribution in rhel_based_distros
      ansible.builtin.assert:
        that:
          - not dnf_status.changed

    - name: Get cifs package status
      when: ansible_distribution in debian_based_distros
      become: true
      ansible.builtin.apt:
        name: "cifs-utils"
        state: present
      check_mode: true
      register: apt_status

    - name: Test cifs package is installed via apt
      when: ansible_distribution in debian_based_distros
      ansible.builtin.assert:
        that:
          - not apt_status.changed

    - name: Get credentials file stats
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.smb"
      register: cred_file_stats

    - name: Test credentials file stats
      ansible.builtin.assert:
        that:
          - cred_file_stats.stat.exists
          - cred_file_stats.stat.gr_name == "root"
          - cred_file_stats.stat.pw_name == "root"
          - cred_file_stats.stat.mode == "0600"
        success_msg: "Successfully tested credential file stats"
        fail_msg: "Failed testing credential file stats"

    - name: Get mount point stats
      loop: "{{ mount_targets }}"
      ansible.builtin.stat:
        path: "/mnt/{{ item.mount }}"
      register: mnt_point_stats

    # TODO reduce output verbosity
    - name: Test mount point stats
      loop: "{{ mnt_point_stats.results }}"
      loop_control:
        label: "Path: {{ item.stat.path }}"
      ansible.builtin.assert:
        that:
          - item.stat.exists
          - item.stat.gr_name in ["root", ansible_env.USER]
          - item.stat.pw_name in ["root", ansible_env.USER]
          - item.stat.mode == "0755"
        success_msg: "Successfully tested mount point {{ item.stat.path }}"
        fail_msg: "Failed testing mount point {{ item.stat.path }}"

    - name: Get mount file stats
      loop: "{{ mount_targets }}"
      ansible.builtin.stat:
        path: "/etc/systemd/system/mnt-{{ item.mount }}.mount"
      register: mnt_file_stats

    - name: Get mount file stats
      loop: "{{ mount_targets }}"
      ansible.builtin.stat:
        path: "/etc/systemd/system/mnt-{{ item.mount }}.mount"
      register: mnt_file_stats

    # TODO reduce output verbosity
    - name: Test mount file stats
      loop: "{{ mnt_file_stats.results }}"
      loop_control:
        label: "Path: {{ item.stat.path }}"
      ansible.builtin.assert:
        that:
          - item.stat.exists
          - item.stat.gr_name == "root"
          - item.stat.pw_name == "root"
          - item.stat.mode == "0644"
        success_msg: "Successfully tested mount file {{ item.stat.path }}"
        fail_msg: "Failed testing mount file {{ item.stat.path }}"

    - name: Reboot the host and continue playbook
      ansible.builtin.reboot:
        msg: Reboot initiated by Ansible
        # INFO increased from 60 due to windows env rebooting ubuntu too slow
        # reboot_timeout: 180
      become: true

    - name: Write bash script to server
      loop: "{{ mount_targets }}"
      ansible.builtin.copy:
        content: |
          #!/bin/bash

          echo 'Hello, world!'
        dest: "/mnt/{{ item.mount }}/{{ dummy_file_name }}"
        mode: "0755"

    - name: Execute bash script from server -> should fail
      loop: "{{ mount_targets }}"
      ansible.builtin.command:
        cmd: "./{{ dummy_file_name }}"
        chdir: "/mnt/{{ item.mount }}"
      changed_when: false
      register: cmd_result
      failed_when: cmd_result.rc != 13

    - name: Execute bash script from server -> works
      loop: "{{ mount_targets }}"
      ansible.builtin.command:
        cmd: "sh /mnt/{{ item.mount }}/{{ dummy_file_name }}"
      changed_when: false

    - name: "Ensure presence of {{ item.mount }}"
      loop: "{{ mount_targets }}"
      ansible.builtin.file:
        path: "/tmp/{{ item.mount }}"
        state: directory
        mode: "0700"

    - name: Copy dummy file to host
      loop: "{{ mount_targets }}"
      ansible.builtin.copy:
        remote_src: true
        src: "/mnt/{{ item.mount }}/{{ dummy_file_name }}"
        dest: "/tmp/{{ item.mount }}/{{ dummy_file_name }}"
        mode: "0600"

    - name: Get dummy file stats
      loop: "{{ mount_targets }}"
      ansible.builtin.stat:
        path: "/tmp/{{ item.mount }}/{{ dummy_file_name }}"
      register: dummy_file_stats

    - name: Assert file exists
      loop: "{{ dummy_file_stats.results }}"
      loop_control:
        label: "Path: {{ item.stat.path }}"
      ansible.builtin.assert:
        that:
          - item.stat.exists
        fail_msg: "File '{{ item.stat.path }}' does not exist!"
        success_msg: "File '{{ item.stat.path }}' got copied from server successfully!"

    - name: Remove test file
      loop: "{{ dummy_file_stats.results }}"
      loop_control:
        label: "Path: {{ item.stat.path }}"
      ansible.builtin.file:
        path: "{{ item.stat.path }}"
        state: absent

    - name: Roll back changes
      ansible.builtin.include_role:
        name: smb_mount
        tasks_from: main.yml
      vars:
        smb_mount_state: absent
        smb_mount_server_host_name: "fileserver"
        smb_mount_server_ip: "192.168.100.200"
