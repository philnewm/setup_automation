---

# tasks file for recreate_unraid_vm

# TODO get community.libvirt.virt to work on unraid
- name: Show path
  ansible.builtin.debug:
    msg: "{{ (nvram_qemu_path, vm_uuid + nvram_file_name_end) | path_join }}"

- name: Check if VM exists
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: vm_status
  changed_when: false
  failed_when: vm_status.rc not in [0,1]

- name: Print out info
  ansible.builtin.debug:
    msg: "{{ vm_status }}"

- name: Shutdown running VM
  ansible.builtin.command: "virsh shutdown {{ vm_name }}"
  when: vm_status.stdout == "running"
  register: result
  changed_when: result.rc == 0

- name: Wait till VM is shut down
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: result
  until: result.stdout == "shut off"
  retries: 60
  delay: 2
  changed_when: false
  when: vm_status.stdout == "running"

- name: Remove existing VM
  when: vm_status.rc == 0
  block:
    - name: Get VMs UUID
      ansible.builtin.command: "virsh domuuid {{ vm_name }}"
      register: dom_uuid
      changed_when: false

    - name: Show UUID
      ansible.builtin.debug:
        msg: "{{ dom_uuid.stdout }}"

    - name: Remove the virtual machine's nvram file
      ansible.builtin.file:
        path: "{{ (nvram_qemu_path, vm_uuid + nvram_file_name_end) | path_join }}"
        state: absent

    - name: Show nvram path
      ansible.builtin.debug:
        msg: "{{ (qemu_vm_path, dom_uuid.stdout + nvram_file_name_end) | path_join }}"

    - name: Undefine the virtual machine
      ansible.builtin.command: "virsh undefine {{ vm_name }}"
      register: result
      changed_when: result.rc == 0

    - name: Remove the virtual machine's disk image
      ansible.builtin.file:
        path: "{{ (vm_domain_path, vm_name, default_img_name) | path_join }}"
        state: absent

    - name: Remove the virtual machine's snapshots
      ansible.builtin.file:
        path: "{{ vm_snapshot_path }}"
        state: absent

    - name: Remove the virtual machine's dir
      ansible.builtin.file:
        path: "{{ (vm_domain_path, vm_name) | path_join }}"
        state: absent

    - name: Remove the virtual machine's XML configuration file
      ansible.builtin.file:
        path: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
        state: absent

# TODO write xml from yaml dictionary
- name: Template VM xml definition
  ansible.builtin.template:
    src: "{{ vm_name }}.xml.j2"
    dest: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
    mode: "0700"

- name: Show generated UUID
  ansible.builtin.debug:
    msg: "{{ vm_uuid }}"

- name: Copy nvram definition
  ansible.builtin.copy:
    remote_src: true
    src: "{{ nvram_src_path }}"
    dest: "{{ (nvram_qemu_path, vm_uuid + nvram_file_name_end) | path_join }}"
    mode: "0644"

- name: "Create {vm_name} dir"
  ansible.builtin.file:
    path: "{{ (vm_domain_path, vm_name) | path_join }}"
    state: directory
    mode: "0755"
    group: "{{ ansible_effective_group_id }}"
    owner: "{{ ansible_env.USER }}"

- name: Create virtual disk
  ansible.builtin.command: "qemu-img create -f qcow2 {{ (vm_domain_path, vm_name, default_img_name) | path_join }} 25G"
  register: result
  changed_when: result.rc == 0

- name: Define new VM
  ansible.builtin.command: |
    virsh define {{ (qemu_vm_path, vm_name) | path_join }}.xml
  register: result
  changed_when: result.rc == 0

- name: Create the virtual machine's snapshots dir
  ansible.builtin.file:
    path: "{{ vm_snapshot_path }}"
    state: "directory"
    mode: '0755'

- name: Start VM
  ansible.builtin.command: |
    virsh start {{ vm_name }}
  changed_when: false

- name: Wait for VM setup ssh connection
  ansible.builtin.wait_for:
    host: "{{ ip_address }}"
    port: 22
    state: started
    timeout: 600

- name: Shutdown running VM
  ansible.builtin.command: "virsh shutdown {{ vm_name }}"
  register: result
  changed_when: result.rc == 0

- name: Wait till VM is shut down
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: result
  until: result.stdout == "shut off"
  retries: 60
  delay: 2
  changed_when: false

- name: Define active_state_name
  ansible.builtin.set_fact:
    active_state_name: "{{ (active_state_snapshot, init_version + image_ext) | join('_') }}"

- name: Define active_state_path
  ansible.builtin.set_fact:
    active_state_path: "{{ (vm_snapshot_path, active_state_name) | path_join }}"

- name: Define snapshot_name
  ansible.builtin.set_fact:
    snapshot_name: "{{ (snapshot_name, init_version + image_ext) | join('_') }}"

- name: Define snapshot_name_path
  ansible.builtin.set_fact:
    snapshot_name_path: "{{ (vm_snapshot_path, snapshot_name) | path_join }}"

- name: Create initial snapshot
  ansible.builtin.command: |
    qemu-img create -f qcow2 -b {{ (vm_domain_path, vm_name, default_img_name) | path_join }} -F qcow2 {{ active_state_path }}
  register: result
  changed_when: result.rc == 0

- name: Copy snapshot from current active-state
  ansible.builtin.copy:
    remote_src: true
    src: "{{ active_state_path }}"
    dest: "{{ snapshot_name_path }}"
    mode: "0644"

- name: Remove the virtual machine's nvram file
  ansible.builtin.file:
    path: "{{ (nvram_qemu_path, vm_uuid + nvram_file_name_end) | path_join }}"
    state: absent

- name: Undefine the virtual machine
  ansible.builtin.command: "virsh undefine {{ vm_name }}"
  register: result
  changed_when: result.rc == 0

- name: Remove the virtual machine's XML configuration file
  ansible.builtin.file:
    path: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
    state: absent

# TODO write xml from yaml dictionary
- name: Template VM xml definition
  ansible.builtin.template:
    src: "{{ vm_name }}_snapshot.xml.j2"
    dest: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
    mode: "0700"

- name: Copy nvram definition
  ansible.builtin.copy:
    remote_src: true
    src: "{{ nvram_src_path }}"
    dest: "{{ (nvram_qemu_path, vm_uuid + nvram_file_name_end) | path_join }}"
    mode: "0644"

- name: Define new VM
  ansible.builtin.command: |
    virsh define {{ (qemu_vm_path, vm_name) | path_join }}.xml
  register: result
  changed_when: result.rc == 0

- name: Start VM
  ansible.builtin.command: |
    virsh start {{ vm_name }}
  changed_when: false

...
