---

# tasks file for recreate_unraid_vm
# TODO get community.libvirt.virt to work on unraid

- name: Check if VM exists
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: vm_status
  changed_when: false
  failed_when: vm_status.rc not in [0,1]

- name: Print out info
  ansible.builtin.debug:
    msg: "{{ vm_status }}"

- name: Shutdown running VM
  ansible.builtin.command: "virsh shutdown {{ vm_name }}"
  when: vm_status.stdout == "running"

- name: Wait till VM is shut down
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: result
  until: result.stdout == "shut off"
  retries: 60
  delay: 2
  changed_when: false
  when: vm_status.stdout == "running"

- name: Remove existing VM
  block:
    - name: Get VMs UUID
      ansible.builtin.command: "virsh domuuid {{ vm_name }}"
      register: dom_uuid

    - name: Show UUID
      ansible.builtin.debug:
        msg: "{{ dom_uuid.stdout }}"

    - name: Remove the virtual machine's nvram file
      ansible.builtin.file:
        path: "/etc/libvirt/qemu/nvram/{{ dom_uuid.stdout }}_VARS-pure-efi.fd"
        state: absent

    - name: Undefine the virtual machine
      command: "virsh undefine {{ vm_name }}"

    - name: Remove the virtual machine's disk image
      ansible.builtin.file:
        path: "/mnt/user/domains/{{ vm_name }}/vdisk1.img"
        state: absent

    - name: Remove the virtual machine's snapshots
      ansible.builtin.file:
        path: "/mnt/user/domains/{{ vm_name }}/snapshots/"
        state: absent

    - name: Remove the virtual machine's dir
      ansible.builtin.file:
        path: "/mnt/user/domains/{{ vm_name }}"
        state: absent

    - name: Remove the virtual machine's XML configuration file
      ansible.builtin.file:
        path: "/etc/libvirt/qemu/{{ vm_name }}.xml"
        state: absent

  when: vm_status.rc == 0

# TODO write xml from yaml dictionary
- name: Template VM xml definition
  ansible.builtin.template:
    src: "{{ vm_name }}.xml.j2"
    dest: "/etc/libvirt/qemu/{{ vm_name }}.xml"
    mode: "0700"

- name: Show generated UUID
  ansible.builtin.debug:
    msg: "{{ vm_uuid }}"

- name: Copy nvram definition
  ansible.builtin.copy:
    remote_src: true
    src: /usr/share/qemu/ovmf-x64/OVMF_VARS-pure-efi.fd
    dest: "/etc/libvirt/qemu/nvram/{{ vm_uuid }}_VARS-pure-efi.fd"

- name: "Create {vm_name} dir"
  ansible.builtin.file:
    path: "/mnt/user/domains/{{ vm_name }}/"
    state: directory
    mode: "0755"
    group: "{{ ansible_effective_group_id }}"
    owner: "{{ ansible_env.USER }}"

- name: Create the virtual disk
  ansible.builtin.command: "qemu-img create -f qcow2 /mnt/user/domains/{{ vm_name }}/init_install.img 25G"

- name: Define new VM
  ansible.builtin.command: |
    virsh define /etc/libvirt/qemu/{{ vm_name }}.xml

- name: Create the virtual machine's snapshots dir
  ansible.builtin.file:
    path: "/mnt/user/domains/{{ vm_name }}/snapshots/"
    state: "directory"
    mode: '0755'

- name: Create first snapshot
  ansible.builtin.command: |
    qemu-img create -f qcow2 -b /mnt/user/domains/{{ vm_name }}/init_install.img -F qcow2 /mnt/user/domains/{{ vm_name }}/snapshots/snapshot01.img

- name: Create new VM
  ansible.builtin.command: |
    virsh start {{ vm_name }}



# TODO update snapshot img to qcow2

# TODO remove installation media


...
