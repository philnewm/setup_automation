---

- name: Verify
  hosts: client

  vars_files:
    - ../../defaults/main/common.yml
    - ../../defaults/main/extensions.yml
    - ../../defaults/main/themes.yml
    - ../../vars/main.yml

  tasks:
    - name: Gather package facts
      ansible.builtin.package_facts:

    - name: Get repos on rhel based systems
      when: ansible_os_family == "RedHat"
      block:
        - name: Get enabled repos
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              dnf repolist --enabled | awk '{print $1}'
            executable: /bin/bash
          register: enabled_repos
          changed_when: false

        - name: Test enabled repos
          ansible.builtin.assert:
            that:
              - item in enabled_repos.stdout_lines
            fail_msg: "Repo '{{ item }}' is missing."
            quiet: true
          loop:
            - crb
            - epel
            - rpmfusion-free-updates
            - rpmfusion-nonfree-updates

    - name: Test installed requirements
      loop: "{{ dependencies[ansible_os_family] }}"
      ansible.builtin.assert:
        that:
          - item in ansible_facts.packages
        fail_msg: "Required package '{{ item }}' is missing."
        quiet: true

    - name: Test installed gnome packages
      loop: "{{ gnome_packages[ansible_os_family] | flatten(1) }}"
      ansible.builtin.assert:
        that:
          - item in ansible_facts.packages
        fail_msg: "Gnome package '{{ item }}' is missing."
        quiet: true

    - name: Test removed gnome packages
      loop: "{{ obsolete_packages[ansible_os_family] | flatten(1) }}"
      ansible.builtin.assert:
        that:
          - item not in ansible_facts.packages
        fail_msg: "Obsolete Gnome package {{ item }} is still rpesent"
        quiet: true

    - name: Get current target
      ansible.builtin.stat:
        path: /etc/systemd/system/default.target
      register: default_target

    - name: Test graphical target
      ansible.builtin.assert:
        that:
          - default_target.stat.islnk == true
          - default_target.stat.lnk_target == "/usr/lib/systemd/system/graphical.target"
        fail_msg: "Graphical target not set as default."
        quiet: true

    - name: "Get gdm config"
      ansible.builtin.command:
        cmd: "cat {{ gdm_config_file[ansible_distribution] }}"
      register: gdm_config
      changed_when: false

    - name: Assert X11 is set
      ansible.builtin.assert:
        that:
          - "'WaylandEnable=false' in gdm_config.stdout_lines"
          - "'DefaultSession=gnome-xorg.desktop' in gdm_config.stdout_lines"
        fail_msg: "One or both of the expected lines are not present in {{ gdm_config_file[ansible_distribution] }}"
        quiet: true

    - name: Get Gnome version
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          gnome-shell --version | awk '{print $3}' | cut -d'.' -f1
        executable: /bin/bash
      register: gnome_major_version
      changed_when: false

    - name: Get gnome base settings
      loop: "{{ gnome_base_settings[gnome_major_version.stdout] | dict2items }}"
      community.general.dconf:
        key: "{{ item.key }}"
        state: read
      register: dconf_list

    - name: Test gnome settings
      loop: "{{ dconf_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item.key }}"
      ansible.builtin.assert:
        that:
          - entry.value == gnome_base_settings[gnome_major_version.stdout][entry.item.key]
        fail_msg: |
          "Expected value '{{ gnome_base_settings[gnome_major_version.stdout][entry.item.key] }}'
          but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'."
        quiet: true

    - name: Get installed GNOME extensions
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          ls -1d {{ extension_paths | join('* ') }}* | xargs -n1 basename | cat
        executable: /bin/bash
      register: gnome_extensions_list
      changed_when: false

    - name: Test installed extensions
      loop: "{{ gnome_extensions }}"
      loop_control:
        label: "{{ extension.name }}"
        loop_var: extension
      when: extension[ansible_os_family] is defined
      ansible.builtin.assert:
        that:
          extension[ansible_os_family].address in gnome_extensions_list.stdout_lines
        fail_msg: "Failed to find '{{ extension[ansible_os_family].address }}' in installed extensions."
        quiet: true

    - name: Get enabled extensions
      community.general.dconf:
        key: "/org/gnome/shell/enabled-extensions"
        state: read
      register: enabled_extensions_list

    - name: Test enabled extensions
      loop: "{{ gnome_extensions }}"
      loop_control:
        label: "{{ extension.name }}"
        loop_var: extension
      when: extension[ansible_os_family] is defined
      ansible.builtin.assert:
        that:
          extension[ansible_os_family].address in enabled_extensions_list.value
        fail_msg: "'{{ extension[ansible_os_family].address }}' did not get enabled."
        quiet: true

    - name: Get disabled extensions
      community.general.dconf:
        key: "/org/gnome/shell/disabled-extensions"
        state: read
      register: disabled_extensions_list

    - name: Show disabled extensions
      ansible.builtin.debug:
        var: disabled_extensions_list

    - name: Test disabled extensions
      ansible.builtin.assert:
        # INFO none is default - changes to '@as []' as soon as an extension was diabled ones
        that:
          - disabled_extensions_list.value in [none, '@as []']
        fail_msg: "Found disabled extension '{{ disabled_extensions_list.value }}' expected one of [none, '@as []']."
        quiet: true

    - name: Collect gnome extensions dconf config
      loop: "{{ gnome_extensions }}"
      loop_control:
        loop_var: ext
        label: "{{ ext.name }}"
      when: ext.dconf_settings is defined
      ansible.builtin.set_fact:
        ext_dconf: "{{ ext_dconf | default({}) | combine(ext.dconf_settings) }}"

    - name: Get gnome extension settings
      loop: "{{ ext_dconf | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      community.general.dconf:
        key: "{{ item.key }}"
        state: read
      register: ext_dconf_value_list

    - name: Test gnome extension settings
      loop: "{{ ext_dconf_value_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item.key }}"
      ansible.builtin.assert:
        that:
          - entry.item.value == ext_dconf[entry.item.key]
        fail_msg: "Expected value '{{ ext_dconf[entry.item.key] }}' but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'."
        quiet: true

    - name: Get installed gnome themes
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          ls -1d {{ theme_paths | join('* ') }}* | xargs -n1 basename | cat
        executable: /bin/bash
      register: gnome_themes_list
      changed_when: false

    - name: Test installed gnome themes
      loop: "{{ gnome_themes | dict2items }}"
      loop_control:
        loop_var: theme
        label: "{{ theme.value.name }}"
      ansible.builtin.assert:
        that:
          theme.value.name in gnome_themes_list.stdout_lines
        fail_msg: "Theme {{ theme.value.name }} not found."
        quiet: true

    - name: Collect themes dconf config
      loop: "{{ gnome_themes | dict2items }}"
      loop_control:
        label: "{{ item.value.name }}"
      ansible.builtin.set_fact:
        theme_dconf: "{{ theme_dconf | default({}) | combine(item.value.dconf) }}"

    - name: Get gnome theme settings
      loop: "{{ theme_dconf | dict2items }}"
      community.general.dconf:
        key: "{{ item.key }}"
        state: read
      register: theme_dconf_value_list

    - name: Test gnome theme settings
      loop: "{{ theme_dconf_value_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item.key }}"
      ansible.builtin.assert:
        that:
          - entry.item.value == theme_dconf[entry.item.key]
        fail_msg: "Expected value '{{ theme_dconf[entry.item.key] }}' but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'."
        quiet: true

    - name: Get users list
      ansible.builtin.getent:
        database: passwd

    - name: Extract usernames with valid shell
      loop: "{{ getent_passwd | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: item.value[5] in valid_shells
      ansible.builtin.set_fact:
        shell_users: "{{ shell_users | default([]) + [item.key] }}"

    - name: Get profile config
      become: true
      loop: "{{ shell_users }}"
      loop_control:
        loop_var: shell_user
      when: profile_pictures[shell_user] is defined
      ansible.builtin.command:
        cmd: "cat /var/lib/AccountsService/users/{{ shell_user }}"
      register: profile_config
      changed_when: false

    # assert configured profile picture
    - name: Assert profile picture for username
      loop: "{{ profile_config.results }}"
      loop_control:
        loop_var: profile
        label: profile.shell_user
      when: profile.stdout_lines is defined
      ansible.builtin.assert:
        that:
          "'Icon=' ~ picture_dest_path ~ '/' ~ profile.shell_user in profile.stdout_lines"
        fail_msg: |
          "Expected profile picture path 'Icon={{ picture_dest_path }}/
          {{ profile.shell_user }}' is not present in
          {{ profile_config_path }}/{{ profile.shell_user }}"
        quiet: true

    # - name: Roll back gnome changes
    #   ansible.builtin.include_role:
    #     name: gnome_setup
    #   vars:
    #     gnome_setup_state: absent
