---

# TODO check potential speed improvement
- name: Gather package facts
  ansible.builtin.package_facts:

- name: Install additional repos
  loop: "{{ additional_rhel_repos }}"
  when: ansible_os_family == redhat
  become: true
  ansible.builtin.dnf:
    name: "{{ item }}"
    disable_gpg_check: true
    update_cache: true

- name: Install global dependencies 
  loop: "{{ dependencies[ansible_os_family] }}"
  when: item not in ansible_facts.packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  become: true

- name: Get current system locale
  ansible.builtin.shell:
    cmd: "localectl status | awk '/LANG/{print $3}' | cut -d'=' -f2"
  register: current_locale
  changed_when: false
  check_mode: no

- name: "Set system locale to {{ system_local_lang }}"
  when: ansible_distribution == "AlmaLinux" and current_locale.stdout != system_local_lang
  become: true
  ansible.builtin.command:
    cmd: "localectl set-locale {{ system_local_lang }}"
  register: set_locale_result
  changed_when: set_locale_result.rc == 0

- name: Install Gnome packages
  when: item not in ansible_facts.packages
  loop: "{{ gnome_packages[ansible_distribution] }}"
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    update_cache: true  # updates cache in case of outdates repo entries

- name: Remove obsolete Gnome packages
  become: true
  loop: "{{ obsolete_packages[ansible_os_family] }}"
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent

- name: Get Gnome version
  ansible.builtin.shell:
    cmd: "gnome-shell --version | awk '{print $3}' | cut -d'.' -f1"
  register: gnome_major_version
  changed_when: false

- name: Set default target to graphical
  become: true
  ansible.builtin.file:
    src: /usr/lib/systemd/system/graphical.target
    dest: /etc/systemd/system/default.target
    state: link
  notify: Reboot Host

- name: Configure basic gnome-settings
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop: "{{ gnome_initial_settings[gnome_major_version.stdout] | dict2items }}"

# TODO move to dictionary and figure how how to make it work with the other values in on task
- name: Set keyboard layouts
  ansible.builtin.dconf:
    key: "/org/gnome/desktop/input-sources/sources"
    value: "[('xkb', 'de'), ('xkb', 'us')]"

- name: Find installed GNOME extensions
  ansible.builtin.shell:
    cmd: "ls ~/.local/share/gnome-shell/extensions/ && ls /usr/share/gnome-shell/extensions"
  register: gnome_extensions_list
  changed_when: false
  failed_when: gnome_extensions_list.rc not in [0, 2]

- name: Install extensions
  loop: "{{ gnome_extensions }}"
  when: ansible_distribution in extension.package.keys() | list and extension.name not in gnome_extensions_list.stdout_lines
  ansible.builtin.include_tasks:
    file: extensions.yml
  loop_control:
    label: "{{ extension.name }}"
    loop_var: extension

- name: Remove unwanted gnome extensions
  become: true
  loop: "{{ obsolete_gnome_extensions }}"
  ansible.builtin.file:
    path: "/usr/share/gnome-shell/extensions/{{ item }}"
    state: absent

- name: Find installed GNOME extensions
  ansible.builtin.shell:
    cmd: "ls ~/.local/share/gnome-shell/extensions/ && ls /usr/share/gnome-shell/extensions"
  register: gnome_extensions_list
  changed_when: false

- name: Enable installed extensions
  ansible.builtin.dconf:
    key: "/org/gnome/shell/enabled-extensions"
    value: "{{ gnome_extensions_list.stdout_lines | to_json }}"

# INFO partly broken visible columns show no effect
# - name: Configure nautilus
#   community.general.dconf:
#     key: "{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ nautilus_settings }}"

# - name: Configure gedit
#   community.general.dconf:
#     key: "{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ text_editor_settings }}"

# - name: Add terminal profile
#   community.general.dconf:
#     key: "{{ terminal_profile_list }}"
#     value: "['{{ terminal_profile_uuid }}']"

# - name: Configure terminal profile
#   community.general.dconf:
#     key: "{{ terminal_profile_path }}{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ terminal_profile_settings }}"

# - name: Configure terminal legacy settings
#   community.general.dconf:
#     key: "{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ terminal_legacy_settings }}"
