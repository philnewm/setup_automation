---
# tasks file for gnome_config
# TODO check first if gnome is installed -> install if not
# TODO gnome default install highly distro dependent
# evry distro needs their specific install method for gnome and GUI ingeneral
# TODO decide: one role per gnome app or one role for all gnome-apps
# gnome apps: gnome shell, gnome terminal, gedit, nautilus, system-monitor, disk-usage-analyzer, disks, gnome-calendar
# additional apps without own config: gnome-tweaks, gnome-extensions, dconf-editor
# check values using dconf module

# - name: Update packages on rhel based distros
#   when: ansible_distribution in rhel_based_distros
#   become: true
#   ansible.builtin.dnf:
#     name: "*"
#     state: latest

# - name: Update packages on debian based distros
#   when: ansible_distribution in debian_based_distros
#   become: true
#   ansible.builtin.apt:
#     update_cache: true
#     upgrade: true

- name: Gnome base setup on rhel based distros
  when: ansible_distribution in rhel_based_distros
  become: true
  block:
    - name: Install Gnome desktop on rhel based distros
      ansible.builtin.dnf:
        name: "gnome-session-xsession"
        state: present

    - name: Remove obsolete Gnome packages from rhel based distros
      loop: "{{ rhel_obsolete_packages }}"
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: absent

    - name: Install additional Gnome packages on rhel based distros
      loop: "{{ rhel_additional_packages }}"
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present

    - name: Install Gnome extensions on rhel based distros
      loop: "{{ rhel_gnome_extensions }}"
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present

# TODO reasearch more convienet soultion to handle varibale
- name: Get Gnome version
  ansible.builtin.shell:
    cmd: "gnome-shell --version | awk '{print $3}' | cut -d'.' -f1"
  register: gnome_major_version

- name: Format Gnome version
  ansible.builtin.set_fact:
    gnome_major_version: "v{{ gnome_major_version.stdout }}"
 
- name: Gnome base setup on debian based distros
  when: ansible_distribution in debian_based_distros
  become: true
  block:
    - name: Install Gnome desktop on debian based distros
      ansible.builtin.apt:
        name: "gnome-session"
        state: present
    
    - name: Remove obsolete Gnome packages from debian based distros
      loop: "{{ debian_obsolete_packages }}"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: absent

    - name: Install additional Gnome packages on debian based distros
      loop: "{{ debian_additional_packages }}"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present

    - name: Install Gnome extensions on debian based distros
      loop: "{{ debian_gnome_extensions }}"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present

- name: Ensure default target is graphical
  become: true
  ansible.builtin.command:
    cmd: systemctl set-default graphical.target
  register: result
  changed_when: result.rc == 0
  notify: Reboot Host

- name: Install required packages
  ansible.builtin.package:
    name: "{{ prerequired_packages }}"
    state: present
  become: true

- name: Install pip packages
  ansible.builtin.pip:
    name: "{{ pip_packages }}"
    state: present

- name: Configure gnome-settings
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ gnome_initial_settings[gnome_major_version] }}"

# INFO partly broken visible columns show no effect
# - name: Configure nautilus
#   community.general.dconf:
#     key: "{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ nautilus_settings }}"

# - name: Configure text editor
#   community.general.dconf:
#     key: "{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ text_editor_settings }}"

# - name: Add terminal profile
#   community.general.dconf:
#     key: "{{ terminal_profile_list }}"
#     value: "['{{ terminal_profile_uuid }}']"

# - name: Configure terminal profile
#   community.general.dconf:
#     key: "{{ terminal_profile_path }}{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ terminal_profile_settings }}"

# - name: Configure terminal legacy settings
#   community.general.dconf:
#     key: "{{ item.key }}"
#     value: "{{ item.value }}"
#   with_dict: "{{ terminal_legacy_settings }}"
