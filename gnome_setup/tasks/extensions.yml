---

- name: Save dconf path
  when: extension.dconf_path is defined 
  ansible.builtin.set_fact:
    dconf_path: "{{ extension.dconf_path }}"

- name: Install extension dependencies
  when: extension.dependencies is defined
  loop: "{{ extension.dependencies }}"
  loop_control:
    loop_var: dependency
  ansible.builtin.package:
    name: "{{ dependency }}"
    state: present
  become: true

- name: Show empty values
  ansible.builtin.debug:
    msg: "{{ extension.package[ansible_distribution] }}"

- name: Install Gnome extensions
  when: extension.package[ansible_distribution] != ""
  become: true
  ansible.builtin.package:
    name: "{{ extension.package[ansible_distribution] }}"
    state: present

- name: Get Extensions from Github
  when: extension.package[ansible_distribution] == ""
  block:
    - name: "Clone extensions from github"
      ansible.builtin.git:
        repo: "{{ extension.repo_url }}"
        dest: "{{ (user_install_dir, extension.download_dir) | ansible.builtin.path_join }}"
        single_branch: true
        version: "{{ extension.branch[gnome_major_version.stdout] }}"
        depth: 1
      register: git_result

    - name: Update installer permissions
      ansible.builtin.file:
        path: "{{ (user_install_dir, extension.install_dir, extension.installer) | ansible.builtin.path_join }}"
        mode: "0755"
      when: git_result.changed

    - name: "Install extensions from github"
      ansible.builtin.command: "{{ extension.install_cmd }}"
      args:
        chdir: "{{ (user_install_dir, extension.install_dir) | ansible.builtin.path_join }}"
      register: install_result
      changed_when: install_result.rc == 0
      when: git_result.changed

    - name: Remove downloaded repos
      ansible.builtin.file:
        path: "{{ user_install_dir }}"
        state: absent

- name: Configure extension
  when: extension.dconf_settings is defined
  loop: "{{  extension.dconf_settings | dict2items }}"
  loop_control:
    loop_var: dconf_setting
  community.general.dconf:
    key: "{{ dconf_path }}{{ dconf_setting.key }}"
    value: "{{ dconf_setting.value }}"

...
