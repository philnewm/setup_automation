---

# tasks file for create_qemu_snapshot

- name: Get xml definition
  ansible.builtin.command: |
    virsh dumpxml {{ vm_name }}
  register: vm_defintion_xml
  changed_when: false

- name: Get nvram path from xml
  community.general.xml:
    xmlstring: "{{ vm_defintion_xml.stdout }}"
    xpath: /domain/os/nvram
    content: text
  register: nvram_path

- name: Show variable
  ansible.builtin.debug:
    var: nvram_path.matches[0].nvram

- name: Grep nvram dir path
  ansible.builtin.set_fact:
    nvram_qemu_path: "{{ nvram_path.matches[0].nvram | dirname }}"

- name: Get VMs UUID
  ansible.builtin.command: "virsh domuuid {{ vm_name }}"
  register: dom_uuid
  changed_when: false

- name: Check for existing snapshots
  community.general.xml:
    xmlstring: "{{ vm_defintion_xml.stdout }}"
    xpath: /domain/devices/disk[@device='disk']/source
    content: attribute
  register: image_path_long

- name: Shorten image path
  ansible.builtin.set_fact:
    image_path: "{{ image_path_long.matches[0].source.file }}"

- name: Grep image dir path
  ansible.builtin.set_fact:
    image_dir_path: "{{ image_path | dirname }}"

- name: Check if "snapshot" is present
  ansible.builtin.set_fact:
    snapshot_present: "{{ image_dir_path | regex_search('snapshot') is not none }}"

- name: Check VM state
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: vm_status
  changed_when: false

- name: Shutdown running VM
  ansible.builtin.command: "virsh shutdown {{ vm_name }}"
  register: result
  changed_when: result.rc == 0
  when: vm_status.stdout == "running"

- name: Wait till VM is shut down
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: result
  until: result.stdout == "shut off"
  retries: 60
  delay: 2
  changed_when: false
  when: vm_status.stdout == "running"

- name: Remove the virtual machine's nvram file
  ansible.builtin.file:
    path: "{{ (nvram_qemu_path, dom_uuid.stdout + nvram_file_name_end) | path_join }}"
    state: absent

- name: Undefine the virtual machine
  ansible.builtin.command: "virsh undefine {{ vm_name }}"
  register: result
  changed_when: result.rc == 0

- name: Remove the virtual machine's XML configuration file
  ansible.builtin.file:
    path: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
    state: absent

- name: Initialize snapshots
  block:
    - name: Grep image dir path
      ansible.builtin.set_fact:
        image_file_name: "{{ image_path | basename }}"

    - name: Get current snapshot version
      ansible.builtin.set_fact:
        three_digits: "{{ image_file_name | regex_search('\\d{3}') }}"

    - name: Increment snapshot version
      ansible.builtin.set_fact:
        incremented_number: "{{ '%03d'|format(three_digits | int + 1) }}"

    - name: Assign current snapshot_image_path
      ansible.builtin.set_fact:
        current_image_file_name: "{{ image_file_name | regex_replace('\\d{3}', incremented_number | string) }}"

    - name: Show incremented path
      ansible.builtin.debug:
        var: current_image_file_name
  when: snapshot_present == true

- name: Create first snapshot
  block:
    - name: Create initial snapshot
      ansible.builtin.command: |
        qemu-img create -f qcow2 -b {{ (vm_domain_path, vm_name, default_img_name) | path_join }} -F qcow2 {{ (vm_snapshot_path, init_snapshot) | path_join }}
      register: result
      changed_when: result.rc == 0
  when: snapshot_present == false

# TODO only copy active state -> new snapshot
# TODO rename active state to version number from new snapshot

- name: Copy current active-state
  ansible.builtin.copy:
    remote_src: true
    src: "{{ (vm_snapshot_path, snapshot_image_path) | path_join }}"
    dest: "{{ (vm_snapshot_path, active_state_snapshot) | path_join }}"
    mode: "0644"

# TODO write xml from yaml dictionary
- name: Template VM xml definition
  ansible.builtin.template:
    src: "{{ vm_name }}.xml.j2"
    dest: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
    mode: "0700"

- name: Copy nvram definition
  ansible.builtin.copy:
    remote_src: true
    src: "{{ nvram_src_path }}"
    dest: "{{ (nvram_qemu_path, dom_uuid.stdout + nvram_file_name_end) | path_join }}"
    mode: "0644"

- name: Define new VM
  ansible.builtin.command: |
    virsh define {{ (qemu_vm_path, vm_name) | path_join }}.xml

- name: Start VM
  ansible.builtin.command: |
    virsh start {{ vm_name }}
  changed_when: false

...
