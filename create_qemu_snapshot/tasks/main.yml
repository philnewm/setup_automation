---

# tasks file for create_qemu_snapshot

# TODO early return for non existing vm definition
- name: Get xml definition
  ansible.builtin.command: | 
    virsh dumpxml {{ vm_name }}
  register: vm_defintion_xml

- name: Get nvram path from xml
  community.general.xml:
    xmlstring: "{{ vm_defintion_xml.stdout }}"
    xpath: /domain/os/nvram
    content: text
  register: nvram_path

- name: Get VMs UUID
  ansible.builtin.command: "virsh domuuid {{ vm_name }}"
  register: dom_uuid

- name: Check for existing snapshots
  community.general.xml:
    xmlstring: "{{ vm_defintion_xml.stdout }}"
    xpath: /domain/devices/disk[@device='disk']/source
    content: attribute
  register: image_path_long

- name: shorten_image_path
  ansible.builtin.set_fact:
    image_path: "{{ image_path_long.matches[0].source.file }}"

- name: shorten_image_path
  ansible.builtin.set_fact:
    image_dir_path: "{{ image_path | dirname }}"

- name: Check if "snapshot" is present
  ansible.builtin.set_fact:
    snapshot_present: "{{ image_dir_path | regex_search('snapshot') is not none }}"

- name: Check VM state
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: vm_status
  changed_when: false

- name: Shutdown running VM
  ansible.builtin.command: "virsh shutdown {{ vm_name }}"
  register: result
  changed_when: result.rc == 0
  when: vm_status.stdout == "running"

- name: Wait till VM is shut down
  ansible.builtin.command: "virsh domstate {{ vm_name }}"
  register: result
  until: result.stdout == "shut off"
  retries: 60
  delay: 2
  changed_when: false
  when: vm_status.stdout == "running"

- name: initialize snapshots
  block:
    - name: Create first snapshot
      ansible.builtin.command: |
        qemu-img create -f qcow2 -b {{ (vm_domain_path, vm_name, default_img_name) | path_join }} -F qcow2 {{ (vm_snapshot_path, current_img_name) | path_join }}
      register: result
      changed_when: result.rc == 0

    - name: Remove the virtual machine's nvram file
      ansible.builtin.file:
      # TODO get nvram_qemu_path from .xml
        path: "{{ (nvram_qemu_path, dom_uuid.stdout) | path_join }}_VARS-pure-efi.fd"
        state: absent

    - name: Undefine the virtual machine
      ansible.builtin.command: "virsh undefine {{ vm_name }}"
      register: result
      changed_when: result.rc == 0

    # TODO get qemu_vm_path from xml if possible
    - name: Remove the virtual machine's XML configuration file
      ansible.builtin.file:
        path: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
        state: absent

    # TODO write xml from yaml dictionary
    - name: Template VM xml definition
      ansible.builtin.template:
        src: "{{ vm_name }}_snapshot.xml.j2"
        dest: "{{ (qemu_vm_path, vm_name) | path_join }}.xml"
        mode: "0700"

    - name: Copy nvram definition
      ansible.builtin.copy:
        remote_src: true
        src: "{{ nvram_src_path }}"
        dest: "{{ (nvram_qemu_path, vm_uuid) | path_join }}_VARS-pure-efi.fd"
        mode: "0644"

    - name: Define new VM
      ansible.builtin.command: |
        virsh define {{ (qemu_vm_path, vm_name) | path_join }}.xml

    - name: Start VM
      ansible.builtin.command: |
        virsh start {{ vm_name }}
      changed_when: false

# TODO create active state snapshot which is always the one in use and create anew one after every new snapshot

...
